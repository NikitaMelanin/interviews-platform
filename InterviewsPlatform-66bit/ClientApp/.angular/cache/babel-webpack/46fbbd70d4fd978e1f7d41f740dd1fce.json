{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jexin/Desktop/projects/InterviewsPlatform-66bit/InterviewsPlatform-66bit/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./signalrVideoUploader.service\";\nimport * as i2 from \"./signalrConnector.service\";\nexport class VideoSenderService {\n  constructor(uploaderService, connectorService) {\n    this.uploaderService = uploaderService;\n    this.connectorService = connectorService;\n  }\n\n  sendOnAvailable(recorder) {\n    var _this = this;\n\n    recorder.ondataavailable = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (ev) {\n        _this.uploaderService.sendBytes(VideoSenderService.arrayBufferToBase64(yield ev.data.arrayBuffer()));\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.connectorService.start().then(() => recorder.start(10));\n  }\n\n  static arrayBufferToBase64(buffer) {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n\n    for (let i = 0; i < len; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n\n    return window.btoa(binary);\n  }\n\n}\n\nVideoSenderService.ɵfac = function VideoSenderService_Factory(t) {\n  return new (t || VideoSenderService)(i0.ɵɵinject(i1.SignalrVideoUploaderService), i0.ɵɵinject(i2.SignalrConnectorService));\n};\n\nVideoSenderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VideoSenderService,\n  factory: VideoSenderService.ɵfac\n});","map":{"version":3,"sources":["C:/Users/jexin/Desktop/projects/InterviewsPlatform-66bit/InterviewsPlatform-66bit/ClientApp/src/app/interview/services/videoSender.service.ts"],"names":["i0","i1","i2","VideoSenderService","constructor","uploaderService","connectorService","sendOnAvailable","recorder","ondataavailable","ev","sendBytes","arrayBufferToBase64","data","arrayBuffer","start","then","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","window","btoa","ɵfac","VideoSenderService_Factory","t","ɵɵinject","SignalrVideoUploaderService","SignalrConnectorService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gCAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,4BAApB;AACA,OAAO,MAAMC,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,gBAAlB,EAAoC;AAC3C,SAAKD,eAAL,GAAuBA,eAAvB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACH;;AACDC,EAAAA,eAAe,CAACC,QAAD,EAAW;AAAA;;AACtBA,IAAAA,QAAQ,CAACC,eAAT;AAAA,mCAA2B,WAAOC,EAAP,EAAc;AACrC,QAAA,KAAI,CAACL,eAAL,CAAqBM,SAArB,CAA+BR,kBAAkB,CAACS,mBAAnB,OAA6CF,EAAE,CAACG,IAAH,CAAQC,WAAR,EAA7C,CAA/B;AACH,OAFD;;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAKR,gBAAL,CAAsBS,KAAtB,GAA8BC,IAA9B,CAAmC,MAAMR,QAAQ,CAACO,KAAT,CAAe,EAAf,CAAzC;AACH;;AACyB,SAAnBH,mBAAmB,CAACK,MAAD,EAAS;AAC/B,QAAIC,MAAM,GAAG,EAAb;AACA,UAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,MAAf,CAAd;AACA,UAAMI,GAAG,GAAGF,KAAK,CAACG,UAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC1BL,MAAAA,MAAM,IAAIM,MAAM,CAACC,YAAP,CAAoBN,KAAK,CAACI,CAAD,CAAzB,CAAV;AACH;;AACD,WAAOG,MAAM,CAACC,IAAP,CAAYT,MAAZ,CAAP;AACH;;AAnB2B;;AAqBhCf,kBAAkB,CAACyB,IAAnB,GAA0B,SAASC,0BAAT,CAAoCC,CAApC,EAAuC;AAAE,SAAO,KAAKA,CAAC,IAAI3B,kBAAV,EAA8BH,EAAE,CAAC+B,QAAH,CAAY9B,EAAE,CAAC+B,2BAAf,CAA9B,EAA2EhC,EAAE,CAAC+B,QAAH,CAAY7B,EAAE,CAAC+B,uBAAf,CAA3E,CAAP;AAA6H,CAAhM;;AACA9B,kBAAkB,CAAC+B,KAAnB,GAA2B,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEjC,kBAAT;AAA6BkC,EAAAA,OAAO,EAAElC,kBAAkB,CAACyB;AAAzD,CAAtB,CAAzC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./signalrVideoUploader.service\";\r\nimport * as i2 from \"./signalrConnector.service\";\r\nexport class VideoSenderService {\r\n    constructor(uploaderService, connectorService) {\r\n        this.uploaderService = uploaderService;\r\n        this.connectorService = connectorService;\r\n    }\r\n    sendOnAvailable(recorder) {\r\n        recorder.ondataavailable = async (ev) => {\r\n            this.uploaderService.sendBytes(VideoSenderService.arrayBufferToBase64(await ev.data.arrayBuffer()));\r\n        };\r\n        this.connectorService.start().then(() => recorder.start(10));\r\n    }\r\n    static arrayBufferToBase64(buffer) {\r\n        let binary = '';\r\n        const bytes = new Uint8Array(buffer);\r\n        const len = bytes.byteLength;\r\n        for (let i = 0; i < len; i++) {\r\n            binary += String.fromCharCode(bytes[i]);\r\n        }\r\n        return window.btoa(binary);\r\n    }\r\n}\r\nVideoSenderService.ɵfac = function VideoSenderService_Factory(t) { return new (t || VideoSenderService)(i0.ɵɵinject(i1.SignalrVideoUploaderService), i0.ɵɵinject(i2.SignalrConnectorService)); };\r\nVideoSenderService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: VideoSenderService, factory: VideoSenderService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}